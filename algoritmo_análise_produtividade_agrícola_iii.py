# -*- coding: utf-8 -*-
"""Algoritmo_Análise Produtividade agrícola III.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12chcg5Y08PXX8YRr5hDNxnH2LXjR_jQt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar o arquivo da Planilha3
# Certifique-se de que o nome do arquivo corresponde ao que você fez upload
df_milho_qtd_anual = pd.read_excel('Base de dados_Oficial.xlsx', sheet_name='Planilha3')

print("--- Análise Inicial do DataFrame de Milho (Quantidade Anual - Planilha3) ---")

# 1. Exibir as primeiras linhas para ter uma ideia dos dados
print("\nPrimeiras 5 linhas do DataFrame df_milho_qtd_anual:")
print(df_milho_qtd_anual.head())

# 2. Exibir informações gerais sobre o DataFrame (tipos de dados, contagem de não-nulos)
print("\nInformações do DataFrame df_milho_qtd_anual:")
df_milho_qtd_anual.info()

# 3. Exibir a contagem de valores nulos por coluna
print("\nContagem de valores nulos por coluna em df_milho_qtd_anual:")
print(df_milho_qtd_anual.isnull().sum())

# 4. Estatísticas descritivas da coluna 'Quantidade produzida de milho (toneladas)'
target_col_milho_qtd = 'Quantidade produzida de milho (Toneladas)'
if target_col_milho_qtd in df_milho_qtd_anual.columns:
    print(f"\nEstatísticas Descritivas para '{target_col_milho_qtd}':")
    print(df_milho_qtd_anual[target_col_milho_qtd].describe())
else:
    print(f"\nErro: Coluna '{target_col_milho_qtd}' não encontrada no DataFrame.")

# 5. Contagem de Valores (Top 20) para a coluna 'Quantidade produzida de milho (toneladas)'
if target_col_milho_qtd in df_milho_qtd_anual.columns:
    print(f"\nContagem de Valores (Top 20) para '{target_col_milho_qtd}':")
    print(df_milho_qtd_anual[target_col_milho_qtd].value_counts().head(20))

# 6. Gráfico de Série Temporal
if 'Ano' in df_milho_qtd_anual.columns and target_col_milho_qtd in df_milho_qtd_anual.columns:
    plt.figure(figsize=(15, 7))
    sns.lineplot(x='Ano', y=target_col_milho_qtd, data=df_milho_qtd_anual)
    plt.title(f'Série Temporal da {target_col_milho_qtd} em Piracicaba')
    plt.xlabel('Ano')
    plt.ylabel(target_col_milho_qtd)
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print(f"\nErro: Colunas 'Ano' ou '{target_col_milho_qtd}' não encontradas para gerar o gráfico de série temporal.")

print("\nNomes das colunas em df_milho_qtd_anual:")
print(df_milho_qtd_anual.columns.tolist())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Assumindo que df_milho_qtd_anual foi carregado na célula anterior

print("--- Pré-processamento e Tratamento para Milho (Quantidade Anual - Planilha3) ---")

# 1. Tratamento de Dados Ausentes
print("\nValores nulos antes da imputação:")
print(df_milho_qtd_anual[['Número de dias com chuva', 'Precipitação (mm)']].isnull().sum())

if 'Número de dias com chuva' in df_milho_qtd_anual.columns:
    median_dias_chuva = df_milho_qtd_anual['Número de dias com chuva'].median()
    df_milho_qtd_anual['Número de dias com chuva'].fillna(median_dias_chuva, inplace=True)
    df_milho_qtd_anual['Número de dias com chuva'] = df_milho_qtd_anual['Número de dias com chuva'].astype(int)

if 'Precipitação (mm)' in df_milho_qtd_anual.columns:
    median_precipitacao = df_milho_qtd_anual['Precipitação (mm)'].median()
    df_milho_qtd_anual['Precipitação (mm)'].fillna(median_precipitacao, inplace=True)

print("\nValores nulos após a imputação:")
print(df_milho_qtd_anual.isnull().sum())


# 2. Tratamento da Multicolinearidade e Simplificação

# Lista de colunas a serem removidas devido à alta multicolinearidade (poluentes)
columns_to_drop_poluentes = [
    'Material Particulado (PM10) µg/m3',
    'Óxidos de nitrogênio (NO) µg/m3',
    'Óxidos de nitrogênio (NO₂)'
]

# Verificar correlação entre 'Área plantada (ha)' e 'Área Colhida (ha)'
if 'Área plantada (ha)' in df_milho_qtd_anual.columns and 'Área Colhida (ha)' in df_milho_qtd_anual.columns:
    corr_areas = df_milho_qtd_anual['Área plantada (ha)'].corr(df_milho_qtd_anual['Área Colhida (ha)'])
    print(f"\nCorrelação entre 'Área plantada (ha)' e 'Área Colhida (ha)': {corr_areas:.4f}")
    if corr_areas > 0.99: # Se a correlação for quase perfeita, remover uma
        print("Correlação muito alta entre áreas. Removendo 'Área Colhida (ha)'.")
        columns_to_drop_areas = ['Área Colhida (ha)']
    else:
        columns_to_drop_areas = []
else:
    columns_to_drop_areas = []
    print("\nColunas de área não encontradas ou insuficientes para análise de correlação.")

# Combinar todas as colunas a serem removidas
all_columns_to_drop = columns_to_drop_poluentes + columns_to_drop_areas

print("\nColunas antes da seleção final de variáveis:")
print(df_milho_qtd_anual.columns.tolist())

# Remover as colunas do DataFrame, criando um novo DataFrame limpo para milho_qtd
df_milho_qtd_cleaned = df_milho_qtd_anual.drop(columns=all_columns_to_drop, errors='ignore')

print("\nColunas após a seleção final de variáveis:")
print(df_milho_qtd_cleaned.columns.tolist())

print("\nInformações do DataFrame df_milho_qtd_cleaned após limpeza e seleção:")
df_milho_qtd_cleaned.info()

print("\nPrimeiras 5 linhas do DataFrame df_milho_qtd_cleaned:")
print(df_milho_qtd_cleaned.head())

# Agora, o dataframe df_milho_qtd_cleaned está pronto para a modelagem.
# Vamos também rodar a análise descritiva e o gráfico de série temporal da variável alvo aqui,
# com o nome da coluna corrigido.

target_col_milho_qtd_correct = 'Quantidade produzida (Toneladas)'

if target_col_milho_qtd_correct in df_milho_qtd_cleaned.columns:
    print(f"\nEstatísticas Descritivas para '{target_col_milho_qtd_correct}':")
    print(df_milho_qtd_cleaned[target_col_milho_qtd_correct].describe())

    print(f"\nContagem de Valores (Top 20) para '{target_col_milho_qtd_correct}':")
    print(df_milho_qtd_cleaned[target_col_milho_qtd_correct].value_counts().head(20))

    plt.figure(figsize=(15, 7))
    sns.lineplot(x='Ano', y=target_col_milho_qtd_correct, data=df_milho_qtd_cleaned)
    plt.title(f'Série Temporal da {target_col_milho_qtd_correct} em Piracicaba')
    plt.xlabel('Ano')
    plt.ylabel(target_col_milho_qtd_correct)
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print(f"\nErro final: Coluna '{target_col_milho_qtd_correct}' não encontrada no DataFrame limpo.")

# Import necessary libraries
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

# Assumindo que 'df_milho_qtd_cleaned' é o DataFrame resultante da célula anterior

# 1. Preparação dos dados para o modelo
target_variable_milho_qtd = 'Quantidade produzida (Toneladas)'

# As variáveis preditoras (features) para o modelo de milho (Quantidade Anual)
# Excluindo 'Ano' e o target
features_to_exclude_milho_qtd = [
    target_variable_milho_qtd,
    'Ano'
]

# Selecionar todas as colunas numéricas e depois remover as excluídas
numeric_cols_milho_qtd = df_milho_qtd_cleaned.select_dtypes(include=np.number).columns.tolist()
features_milho_qtd = [col for col in numeric_cols_milho_qtd if col not in features_to_exclude_milho_qtd]

# Exibir as features que serão usadas
print("\nVariáveis preditoras (Features) para o modelo Random Forest (Milho - Quantidade Anual):")
print(features_milho_qtd)

X_milho_qtd = df_milho_qtd_cleaned[features_milho_qtd]
y_milho_qtd = df_milho_qtd_cleaned[target_variable_milho_qtd]

# Verifique se há NaNs restantes em X ou y (deve ser 0 agora)
if X_milho_qtd.isnull().sum().sum() > 0 or y_milho_qtd.isnull().sum() > 0:
    print("\nAVISO: Existem valores NaN em X_milho_qtd ou y_milho_qtd antes do treinamento do modelo. Verifique a etapa de limpeza de dados.")
    print("NaNs em X_milho_qtd:\n", X_milho_qtd.isnull().sum()[X_milho_qtd.isnull().sum() > 0])
    print("NaNs em y_milho_qtd:\n", y_milho_qtd.isnull().sum())


# --- Usando Validação Cruzada K-Fold devido ao pequeno tamanho do dataset (11 amostras) ---
kf_milho_qtd = KFold(n_splits=5, shuffle=True, random_state=42)

rmse_scores_milho_qtd = []
r2_scores_milho_qtd = []
feature_importances_accumulated_milho_qtd = np.zeros(len(features_milho_qtd))

print(f"\nIniciando Treinamento e Avaliação com K-Fold Cross Validation (k=5) para Milho (Quantidade Anual)...")
fold = 1
for train_index, test_index in kf_milho_qtd.split(X_milho_qtd):
    print(f"\n--- Fold {fold} ---")
    X_train_fold_milho_qtd, X_test_fold_milho_qtd = X_milho_qtd.iloc[train_index], X_milho_qtd.iloc[test_index]
    y_train_fold_milho_qtd, y_test_fold_milho_qtd = y_milho_qtd.iloc[train_index], y_milho_qtd.iloc[test_index]

    # 3. Inicialização e Treinamento do Modelo Random Forest Regressor
    model_rf_milho_qtd = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
    model_rf_milho_qtd.fit(X_train_fold_milho_qtd, y_train_fold_milho_qtd)

    # 4. Avaliação do Modelo para o Fold Atual
    y_pred_rf_milho_qtd = model_rf_milho_qtd.predict(X_test_fold_milho_qtd)

    rmse_fold_milho_qtd = np.sqrt(mean_squared_error(y_test_fold_milho_qtd, y_pred_rf_milho_qtd))
    r2_fold_milho_qtd = r2_score(y_test_fold_milho_qtd, y_pred_rf_milho_qtd)

    rmse_scores_milho_qtd.append(rmse_fold_milho_qtd)
    r2_scores_milho_qtd.append(r2_fold_milho_qtd)

    print(f"RMSE (Fold {fold}): {rmse_fold_milho_qtd:.2f}")
    print(f"R² (Fold {fold}): {r2_fold_milho_qtd:.2f}")

    # Acumular importância das features para média
    feature_importances_accumulated_milho_qtd += model_rf_milho_qtd.feature_importances_
    fold += 1

print(f"\n--- Avaliação Média do Modelo Random Forest (K-Fold - Milho - Quantidade Anual) ---")
print(f"RMSE Médio: {np.mean(rmse_scores_milho_qtd):.2f} (± {np.std(rmse_scores_milho_qtd):.2f})")
print(f"R² Médio: {np.mean(r2_scores_milho_qtd):.2f} (± {np.std(r2_scores_milho_qtd):.2f})")

# 5. Análise de Importância das Features (Média sobre os folds)
if not X_milho_qtd.empty and hasattr(model_rf_milho_qtd, 'feature_importances_'):
    feature_importances_mean_milho_qtd = feature_importances_accumulated_milho_qtd / kf_milho_qtd.get_n_splits()
    forest_importances_mean_milho_qtd = pd.Series(feature_importances_mean_milho_qtd, index=X_milho_qtd.columns).sort_values(ascending=False)

    fig, ax = plt.subplots(figsize=(12, 8))
    forest_importances_mean_milho_qtd.plot.bar(ax=ax)
    ax.set_title("Importância Média das Features (Random Forest - Milho - Quantidade Anual - K-Fold)")
    ax.set_ylabel("Média da Redução de Impureza")
    plt.tight_layout()
    plt.show()
else:
    print("\nNão foi possível calcular a importância das features (dados insuficientes ou modelo não treinado).")

# 6. Visualização das Previsões vs. Valores Reais (Opcional, mais complexo com K-Fold para um único gráfico)
# Será difícil visualizar com apenas 11 pontos, mas as métricas médias já são a principal informação.